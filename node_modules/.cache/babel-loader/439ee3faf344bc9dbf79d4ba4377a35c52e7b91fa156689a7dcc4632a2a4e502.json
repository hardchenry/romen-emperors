{"ast":null,"code":"import { normalize_columns_array } from \"./normalize_columns_array.js\";\nimport { CsvError } from \"./CsvError.js\";\nimport { underscore } from \"../utils/underscore.js\";\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if (options.encoding === undefined || options.encoding === true) {\n    options.encoding = \"utf8\";\n  } else if (options.encoding === null || options.encoding === false) {\n    options.encoding = null;\n  } else if (typeof options.encoding !== \"string\" && options.encoding !== null) {\n    throw new CsvError(\"CSV_INVALID_OPTION_ENCODING\", [\"Invalid option encoding:\", \"encoding must be a string or null to return a buffer,\", `got ${JSON.stringify(options.encoding)}`], options);\n  }\n  // Normalize option `bom`\n  if (options.bom === undefined || options.bom === null || options.bom === false) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    throw new CsvError(\"CSV_INVALID_OPTION_BOM\", [\"Invalid option bom:\", \"bom must be true,\", `got ${JSON.stringify(options.bom)}`], options);\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === \"\") {\n    options.cast = undefined;\n  } else if (typeof options.cast === \"function\") {\n    options.cast_function = options.cast;\n    options.cast = true;\n  } else if (options.cast !== true) {\n    throw new CsvError(\"CSV_INVALID_OPTION_CAST\", [\"Invalid option cast:\", \"cast must be true or a function,\", `got ${JSON.stringify(options.cast)}`], options);\n  }\n  // Normalize option `cast_date`\n  if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === \"\") {\n    options.cast_date = false;\n  } else if (options.cast_date === true) {\n    options.cast_date = function (value) {\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  } else if (typeof options.cast_date !== \"function\") {\n    throw new CsvError(\"CSV_INVALID_OPTION_CAST_DATE\", [\"Invalid option cast_date:\", \"cast_date must be true or a function,\", `got ${JSON.stringify(options.cast_date)}`], options);\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = null;\n  if (options.columns === true) {\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  } else if (typeof options.columns === \"function\") {\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  } else if (Array.isArray(options.columns)) {\n    options.columns = normalize_columns_array(options.columns);\n  } else if (options.columns === undefined || options.columns === null || options.columns === false) {\n    options.columns = false;\n  } else {\n    throw new CsvError(\"CSV_INVALID_OPTION_COLUMNS\", [\"Invalid option columns:\", \"expect an array, a function or true,\", `got ${JSON.stringify(options.columns)}`], options);\n  }\n  // Normalize option `group_columns_by_name`\n  if (options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false) {\n    options.group_columns_by_name = false;\n  } else if (options.group_columns_by_name !== true) {\n    throw new CsvError(\"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\", [\"Invalid option group_columns_by_name:\", \"expect an boolean,\", `got ${JSON.stringify(options.group_columns_by_name)}`], options);\n  } else if (options.columns === false) {\n    throw new CsvError(\"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\", [\"Invalid option group_columns_by_name:\", \"the `columns` mode must be activated.\"], options);\n  }\n  // Normalize option `comment`\n  if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === \"\") {\n    options.comment = null;\n  } else {\n    if (typeof options.comment === \"string\") {\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.comment)) {\n      throw new CsvError(\"CSV_INVALID_OPTION_COMMENT\", [\"Invalid option comment:\", \"comment must be a buffer or a string,\", `got ${JSON.stringify(options.comment)}`], options);\n    }\n  }\n  // Normalize option `comment_no_infix`\n  if (options.comment_no_infix === undefined || options.comment_no_infix === null || options.comment_no_infix === false) {\n    options.comment_no_infix = false;\n  } else if (options.comment_no_infix !== true) {\n    throw new CsvError(\"CSV_INVALID_OPTION_COMMENT\", [\"Invalid option comment_no_infix:\", \"value must be a boolean,\", `got ${JSON.stringify(options.comment_no_infix)}`], options);\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if (!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];\n  if (options.delimiter.length === 0) {\n    throw new CsvError(\"CSV_INVALID_OPTION_DELIMITER\", [\"Invalid option delimiter:\", \"delimiter must be a non empty string or buffer or array of string|buffer,\", `got ${delimiter_json}`], options);\n  }\n  options.delimiter = options.delimiter.map(function (delimiter) {\n    if (delimiter === undefined || delimiter === null || delimiter === false) {\n      return Buffer.from(\",\", options.encoding);\n    }\n    if (typeof delimiter === \"string\") {\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n      throw new CsvError(\"CSV_INVALID_OPTION_DELIMITER\", [\"Invalid option delimiter:\", \"delimiter must be a non empty string or buffer or array of string|buffer,\", `got ${delimiter_json}`], options);\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === true) {\n    options.escape = Buffer.from('\"', options.encoding);\n  } else if (typeof options.escape === \"string\") {\n    options.escape = Buffer.from(options.escape, options.encoding);\n  } else if (options.escape === null || options.escape === false) {\n    options.escape = null;\n  }\n  if (options.escape !== null) {\n    if (!Buffer.isBuffer(options.escape)) {\n      throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);\n    }\n  }\n  // Normalize option `from`\n  if (options.from === undefined || options.from === null) {\n    options.from = 1;\n  } else {\n    if (typeof options.from === \"string\" && /\\d+/.test(options.from)) {\n      options.from = parseInt(options.from);\n    }\n    if (Number.isInteger(options.from)) {\n      if (options.from < 0) {\n        throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);\n    }\n  }\n  // Normalize option `from_line`\n  if (options.from_line === undefined || options.from_line === null) {\n    options.from_line = 1;\n  } else {\n    if (typeof options.from_line === \"string\" && /\\d+/.test(options.from_line)) {\n      options.from_line = parseInt(options.from_line);\n    }\n    if (Number.isInteger(options.from_line)) {\n      if (options.from_line <= 0) {\n        throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if (options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null) {\n    options.ignore_last_delimiters = false;\n  } else if (typeof options.ignore_last_delimiters === \"number\") {\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if (options.ignore_last_delimiters === 0) {\n      options.ignore_last_delimiters = false;\n    }\n  } else if (typeof options.ignore_last_delimiters !== \"boolean\") {\n    throw new CsvError(\"CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS\", [\"Invalid option `ignore_last_delimiters`:\", \"the value must be a boolean value or an integer,\", `got ${JSON.stringify(options.ignore_last_delimiters)}`], options);\n  }\n  if (options.ignore_last_delimiters === true && options.columns === false) {\n    throw new CsvError(\"CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS\", [\"The option `ignore_last_delimiters`\", \"requires the activation of the `columns` option\"], options);\n  }\n  // Normalize option `info`\n  if (options.info === undefined || options.info === null || options.info === false) {\n    options.info = false;\n  } else if (options.info !== true) {\n    throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);\n  }\n  // Normalize option `max_record_size`\n  if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {\n    options.max_record_size = 0;\n  } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) {\n    // Great, nothing to do\n  } else if (typeof options.max_record_size === \"string\" && /\\d+/.test(options.max_record_size)) {\n    options.max_record_size = parseInt(options.max_record_size);\n  } else {\n    throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);\n  }\n  // Normalize option `objname`\n  if (options.objname === undefined || options.objname === null || options.objname === false) {\n    options.objname = undefined;\n  } else if (Buffer.isBuffer(options.objname)) {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if (options.encoding === null) {\n      // Don't call `toString`, leave objname as a buffer\n    } else {\n      options.objname = options.objname.toString(options.encoding);\n    }\n  } else if (typeof options.objname === \"string\") {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  } else if (typeof options.objname === \"number\") {\n    // if(options.objname.length === 0){\n    //   throw new Error(`Invalid Option: objname must be a non empty string`);\n    // }\n    // Great, nothing to do\n  } else {\n    throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);\n  }\n  if (options.objname !== undefined) {\n    if (typeof options.objname === \"number\") {\n      if (options.columns !== false) {\n        throw Error(\"Invalid Option: objname index cannot be combined with columns or be defined as a field\");\n      }\n    } else {\n      // A string or a buffer\n      if (options.columns === false) {\n        throw Error(\"Invalid Option: objname field must be combined with columns or be defined as an index\");\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if (options.on_record === undefined || options.on_record === null) {\n    options.on_record = undefined;\n  } else if (typeof options.on_record !== \"function\") {\n    throw new CsvError(\"CSV_INVALID_OPTION_ON_RECORD\", [\"Invalid option `on_record`:\", \"expect a function,\", `got ${JSON.stringify(options.on_record)}`], options);\n  }\n  // Normalize option `on_skip`\n  // options.on_skip ??= (err, chunk) => {\n  //   this.emit('skip', err, chunk);\n  // };\n  if (options.on_skip !== undefined && options.on_skip !== null && typeof options.on_skip !== \"function\") {\n    throw new Error(`Invalid Option: on_skip must be a function, got ${JSON.stringify(options.on_skip)}`);\n  }\n  // Normalize option `quote`\n  if (options.quote === null || options.quote === false || options.quote === \"\") {\n    options.quote = null;\n  } else {\n    if (options.quote === undefined || options.quote === true) {\n      options.quote = Buffer.from('\"', options.encoding);\n    } else if (typeof options.quote === \"string\") {\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.quote)) {\n      throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);\n    }\n  }\n  // Normalize option `raw`\n  if (options.raw === undefined || options.raw === null || options.raw === false) {\n    options.raw = false;\n  } else if (options.raw !== true) {\n    throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);\n  }\n  // Normalize option `record_delimiter`\n  if (options.record_delimiter === undefined) {\n    options.record_delimiter = [];\n  } else if (typeof options.record_delimiter === \"string\" || Buffer.isBuffer(options.record_delimiter)) {\n    if (options.record_delimiter.length === 0) {\n      throw new CsvError(\"CSV_INVALID_OPTION_RECORD_DELIMITER\", [\"Invalid option `record_delimiter`:\", \"value must be a non empty string or buffer,\", `got ${JSON.stringify(options.record_delimiter)}`], options);\n    }\n    options.record_delimiter = [options.record_delimiter];\n  } else if (!Array.isArray(options.record_delimiter)) {\n    throw new CsvError(\"CSV_INVALID_OPTION_RECORD_DELIMITER\", [\"Invalid option `record_delimiter`:\", \"value must be a string, a buffer or array of string|buffer,\", `got ${JSON.stringify(options.record_delimiter)}`], options);\n  }\n  options.record_delimiter = options.record_delimiter.map(function (rd, i) {\n    if (typeof rd !== \"string\" && !Buffer.isBuffer(rd)) {\n      throw new CsvError(\"CSV_INVALID_OPTION_RECORD_DELIMITER\", [\"Invalid option `record_delimiter`:\", \"value must be a string, a buffer or array of string|buffer\", `at index ${i},`, `got ${JSON.stringify(rd)}`], options);\n    } else if (rd.length === 0) {\n      throw new CsvError(\"CSV_INVALID_OPTION_RECORD_DELIMITER\", [\"Invalid option `record_delimiter`:\", \"value must be a non empty string or buffer\", `at index ${i},`, `got ${JSON.stringify(rd)}`], options);\n    }\n    if (typeof rd === \"string\") {\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if (typeof options.relax_column_count === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.relax_column_count === undefined || options.relax_column_count === null) {\n    options.relax_column_count = false;\n  } else {\n    throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);\n  }\n  if (typeof options.relax_column_count_less === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {\n    options.relax_column_count_less = false;\n  } else {\n    throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);\n  }\n  if (typeof options.relax_column_count_more === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {\n    options.relax_column_count_more = false;\n  } else {\n    throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);\n  }\n  // Normalize option `relax_quotes`\n  if (typeof options.relax_quotes === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.relax_quotes === undefined || options.relax_quotes === null) {\n    options.relax_quotes = false;\n  } else {\n    throw new Error(`Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`);\n  }\n  // Normalize option `skip_empty_lines`\n  if (typeof options.skip_empty_lines === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {\n    options.skip_empty_lines = false;\n  } else {\n    throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if (typeof options.skip_records_with_empty_values === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null) {\n    options.skip_records_with_empty_values = false;\n  } else {\n    throw new Error(`Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`);\n  }\n  // Normalize option `skip_records_with_error`\n  if (typeof options.skip_records_with_error === \"boolean\") {\n    // Great, nothing to do\n  } else if (options.skip_records_with_error === undefined || options.skip_records_with_error === null) {\n    options.skip_records_with_error = false;\n  } else {\n    throw new Error(`Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`);\n  }\n  // Normalize option `rtrim`\n  if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {\n    options.rtrim = false;\n  } else if (options.rtrim !== true) {\n    throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);\n  }\n  // Normalize option `ltrim`\n  if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {\n    options.ltrim = false;\n  } else if (options.ltrim !== true) {\n    throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);\n  }\n  // Normalize option `trim`\n  if (options.trim === undefined || options.trim === null || options.trim === false) {\n    options.trim = false;\n  } else if (options.trim !== true) {\n    throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if (options.trim === true && opts.ltrim !== false) {\n    options.ltrim = true;\n  } else if (options.ltrim !== true) {\n    options.ltrim = false;\n  }\n  if (options.trim === true && opts.rtrim !== false) {\n    options.rtrim = true;\n  } else if (options.rtrim !== true) {\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if (options.to === undefined || options.to === null) {\n    options.to = -1;\n  } else {\n    if (typeof options.to === \"string\" && /\\d+/.test(options.to)) {\n      options.to = parseInt(options.to);\n    }\n    if (Number.isInteger(options.to)) {\n      if (options.to <= 0) {\n        throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);\n    }\n  }\n  // Normalize option `to_line`\n  if (options.to_line === undefined || options.to_line === null) {\n    options.to_line = -1;\n  } else {\n    if (typeof options.to_line === \"string\" && /\\d+/.test(options.to_line)) {\n      options.to_line = parseInt(options.to_line);\n    }\n    if (Number.isInteger(options.to_line)) {\n      if (options.to_line <= 0) {\n        throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);\n    }\n  }\n  return options;\n};\nexport { normalize_options };","map":{"version":3,"names":["normalize_columns_array","CsvError","underscore","normalize_options","opts","options","opt","encoding","undefined","JSON","stringify","bom","cast_function","cast","cast_date","value","date","Date","parse","isNaN","cast_first_line_to_header","columns","Array","isArray","group_columns_by_name","comment","Buffer","from","isBuffer","comment_no_infix","delimiter_json","delimiter","length","map","escape","Error","test","parseInt","Number","isInteger","from_line","ignore_last_delimiters","Math","floor","info","max_record_size","objname","toString","on_record","on_skip","quote","raw","record_delimiter","rd","i","relax_column_count","relax_column_count_less","relax_column_count_more","relax_quotes","skip_empty_lines","skip_records_with_empty_values","skip_records_with_error","rtrim","ltrim","trim","to","to_line"],"sources":["C:/Projects/roman-emperors/node_modules/csv-parse/lib/api/normalize_options.js"],"sourcesContent":["import { normalize_columns_array } from \"./normalize_columns_array.js\";\nimport { CsvError } from \"./CsvError.js\";\nimport { underscore } from \"../utils/underscore.js\";\n\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if (options.encoding === undefined || options.encoding === true) {\n    options.encoding = \"utf8\";\n  } else if (options.encoding === null || options.encoding === false) {\n    options.encoding = null;\n  } else if (\n    typeof options.encoding !== \"string\" &&\n    options.encoding !== null\n  ) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_ENCODING\",\n      [\n        \"Invalid option encoding:\",\n        \"encoding must be a string or null to return a buffer,\",\n        `got ${JSON.stringify(options.encoding)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `bom`\n  if (\n    options.bom === undefined ||\n    options.bom === null ||\n    options.bom === false\n  ) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_BOM\",\n      [\n        \"Invalid option bom:\",\n        \"bom must be true,\",\n        `got ${JSON.stringify(options.bom)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if (\n    options.cast === undefined ||\n    options.cast === null ||\n    options.cast === false ||\n    options.cast === \"\"\n  ) {\n    options.cast = undefined;\n  } else if (typeof options.cast === \"function\") {\n    options.cast_function = options.cast;\n    options.cast = true;\n  } else if (options.cast !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_CAST\",\n      [\n        \"Invalid option cast:\",\n        \"cast must be true or a function,\",\n        `got ${JSON.stringify(options.cast)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `cast_date`\n  if (\n    options.cast_date === undefined ||\n    options.cast_date === null ||\n    options.cast_date === false ||\n    options.cast_date === \"\"\n  ) {\n    options.cast_date = false;\n  } else if (options.cast_date === true) {\n    options.cast_date = function (value) {\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  } else if (typeof options.cast_date !== \"function\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_CAST_DATE\",\n      [\n        \"Invalid option cast_date:\",\n        \"cast_date must be true or a function,\",\n        `got ${JSON.stringify(options.cast_date)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = null;\n  if (options.columns === true) {\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  } else if (typeof options.columns === \"function\") {\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  } else if (Array.isArray(options.columns)) {\n    options.columns = normalize_columns_array(options.columns);\n  } else if (\n    options.columns === undefined ||\n    options.columns === null ||\n    options.columns === false\n  ) {\n    options.columns = false;\n  } else {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_COLUMNS\",\n      [\n        \"Invalid option columns:\",\n        \"expect an array, a function or true,\",\n        `got ${JSON.stringify(options.columns)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `group_columns_by_name`\n  if (\n    options.group_columns_by_name === undefined ||\n    options.group_columns_by_name === null ||\n    options.group_columns_by_name === false\n  ) {\n    options.group_columns_by_name = false;\n  } else if (options.group_columns_by_name !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\",\n      [\n        \"Invalid option group_columns_by_name:\",\n        \"expect an boolean,\",\n        `got ${JSON.stringify(options.group_columns_by_name)}`,\n      ],\n      options,\n    );\n  } else if (options.columns === false) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\",\n      [\n        \"Invalid option group_columns_by_name:\",\n        \"the `columns` mode must be activated.\",\n      ],\n      options,\n    );\n  }\n  // Normalize option `comment`\n  if (\n    options.comment === undefined ||\n    options.comment === null ||\n    options.comment === false ||\n    options.comment === \"\"\n  ) {\n    options.comment = null;\n  } else {\n    if (typeof options.comment === \"string\") {\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.comment)) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_COMMENT\",\n        [\n          \"Invalid option comment:\",\n          \"comment must be a buffer or a string,\",\n          `got ${JSON.stringify(options.comment)}`,\n        ],\n        options,\n      );\n    }\n  }\n  // Normalize option `comment_no_infix`\n  if (\n    options.comment_no_infix === undefined ||\n    options.comment_no_infix === null ||\n    options.comment_no_infix === false\n  ) {\n    options.comment_no_infix = false;\n  } else if (options.comment_no_infix !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_COMMENT\",\n      [\n        \"Invalid option comment_no_infix:\",\n        \"value must be a boolean,\",\n        `got ${JSON.stringify(options.comment_no_infix)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if (!Array.isArray(options.delimiter))\n    options.delimiter = [options.delimiter];\n  if (options.delimiter.length === 0) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_DELIMITER\",\n      [\n        \"Invalid option delimiter:\",\n        \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n        `got ${delimiter_json}`,\n      ],\n      options,\n    );\n  }\n  options.delimiter = options.delimiter.map(function (delimiter) {\n    if (delimiter === undefined || delimiter === null || delimiter === false) {\n      return Buffer.from(\",\", options.encoding);\n    }\n    if (typeof delimiter === \"string\") {\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_DELIMITER\",\n        [\n          \"Invalid option delimiter:\",\n          \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n          `got ${delimiter_json}`,\n        ],\n        options,\n      );\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === true) {\n    options.escape = Buffer.from('\"', options.encoding);\n  } else if (typeof options.escape === \"string\") {\n    options.escape = Buffer.from(options.escape, options.encoding);\n  } else if (options.escape === null || options.escape === false) {\n    options.escape = null;\n  }\n  if (options.escape !== null) {\n    if (!Buffer.isBuffer(options.escape)) {\n      throw new Error(\n        `Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`,\n      );\n    }\n  }\n  // Normalize option `from`\n  if (options.from === undefined || options.from === null) {\n    options.from = 1;\n  } else {\n    if (typeof options.from === \"string\" && /\\d+/.test(options.from)) {\n      options.from = parseInt(options.from);\n    }\n    if (Number.isInteger(options.from)) {\n      if (options.from < 0) {\n        throw new Error(\n          `Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`,\n      );\n    }\n  }\n  // Normalize option `from_line`\n  if (options.from_line === undefined || options.from_line === null) {\n    options.from_line = 1;\n  } else {\n    if (\n      typeof options.from_line === \"string\" &&\n      /\\d+/.test(options.from_line)\n    ) {\n      options.from_line = parseInt(options.from_line);\n    }\n    if (Number.isInteger(options.from_line)) {\n      if (options.from_line <= 0) {\n        throw new Error(\n          `Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`,\n      );\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if (\n    options.ignore_last_delimiters === undefined ||\n    options.ignore_last_delimiters === null\n  ) {\n    options.ignore_last_delimiters = false;\n  } else if (typeof options.ignore_last_delimiters === \"number\") {\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if (options.ignore_last_delimiters === 0) {\n      options.ignore_last_delimiters = false;\n    }\n  } else if (typeof options.ignore_last_delimiters !== \"boolean\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS\",\n      [\n        \"Invalid option `ignore_last_delimiters`:\",\n        \"the value must be a boolean value or an integer,\",\n        `got ${JSON.stringify(options.ignore_last_delimiters)}`,\n      ],\n      options,\n    );\n  }\n  if (options.ignore_last_delimiters === true && options.columns === false) {\n    throw new CsvError(\n      \"CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS\",\n      [\n        \"The option `ignore_last_delimiters`\",\n        \"requires the activation of the `columns` option\",\n      ],\n      options,\n    );\n  }\n  // Normalize option `info`\n  if (\n    options.info === undefined ||\n    options.info === null ||\n    options.info === false\n  ) {\n    options.info = false;\n  } else if (options.info !== true) {\n    throw new Error(\n      `Invalid Option: info must be true, got ${JSON.stringify(options.info)}`,\n    );\n  }\n  // Normalize option `max_record_size`\n  if (\n    options.max_record_size === undefined ||\n    options.max_record_size === null ||\n    options.max_record_size === false\n  ) {\n    options.max_record_size = 0;\n  } else if (\n    Number.isInteger(options.max_record_size) &&\n    options.max_record_size >= 0\n  ) {\n    // Great, nothing to do\n  } else if (\n    typeof options.max_record_size === \"string\" &&\n    /\\d+/.test(options.max_record_size)\n  ) {\n    options.max_record_size = parseInt(options.max_record_size);\n  } else {\n    throw new Error(\n      `Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`,\n    );\n  }\n  // Normalize option `objname`\n  if (\n    options.objname === undefined ||\n    options.objname === null ||\n    options.objname === false\n  ) {\n    options.objname = undefined;\n  } else if (Buffer.isBuffer(options.objname)) {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if (options.encoding === null) {\n      // Don't call `toString`, leave objname as a buffer\n    } else {\n      options.objname = options.objname.toString(options.encoding);\n    }\n  } else if (typeof options.objname === \"string\") {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  } else if (typeof options.objname === \"number\") {\n    // if(options.objname.length === 0){\n    //   throw new Error(`Invalid Option: objname must be a non empty string`);\n    // }\n    // Great, nothing to do\n  } else {\n    throw new Error(\n      `Invalid Option: objname must be a string or a buffer, got ${options.objname}`,\n    );\n  }\n  if (options.objname !== undefined) {\n    if (typeof options.objname === \"number\") {\n      if (options.columns !== false) {\n        throw Error(\n          \"Invalid Option: objname index cannot be combined with columns or be defined as a field\",\n        );\n      }\n    } else {\n      // A string or a buffer\n      if (options.columns === false) {\n        throw Error(\n          \"Invalid Option: objname field must be combined with columns or be defined as an index\",\n        );\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if (options.on_record === undefined || options.on_record === null) {\n    options.on_record = undefined;\n  } else if (typeof options.on_record !== \"function\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_ON_RECORD\",\n      [\n        \"Invalid option `on_record`:\",\n        \"expect a function,\",\n        `got ${JSON.stringify(options.on_record)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `on_skip`\n  // options.on_skip ??= (err, chunk) => {\n  //   this.emit('skip', err, chunk);\n  // };\n  if (\n    options.on_skip !== undefined &&\n    options.on_skip !== null &&\n    typeof options.on_skip !== \"function\"\n  ) {\n    throw new Error(\n      `Invalid Option: on_skip must be a function, got ${JSON.stringify(options.on_skip)}`,\n    );\n  }\n  // Normalize option `quote`\n  if (\n    options.quote === null ||\n    options.quote === false ||\n    options.quote === \"\"\n  ) {\n    options.quote = null;\n  } else {\n    if (options.quote === undefined || options.quote === true) {\n      options.quote = Buffer.from('\"', options.encoding);\n    } else if (typeof options.quote === \"string\") {\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.quote)) {\n      throw new Error(\n        `Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`,\n      );\n    }\n  }\n  // Normalize option `raw`\n  if (\n    options.raw === undefined ||\n    options.raw === null ||\n    options.raw === false\n  ) {\n    options.raw = false;\n  } else if (options.raw !== true) {\n    throw new Error(\n      `Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`,\n    );\n  }\n  // Normalize option `record_delimiter`\n  if (options.record_delimiter === undefined) {\n    options.record_delimiter = [];\n  } else if (\n    typeof options.record_delimiter === \"string\" ||\n    Buffer.isBuffer(options.record_delimiter)\n  ) {\n    if (options.record_delimiter.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a non empty string or buffer,\",\n          `got ${JSON.stringify(options.record_delimiter)}`,\n        ],\n        options,\n      );\n    }\n    options.record_delimiter = [options.record_delimiter];\n  } else if (!Array.isArray(options.record_delimiter)) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n      [\n        \"Invalid option `record_delimiter`:\",\n        \"value must be a string, a buffer or array of string|buffer,\",\n        `got ${JSON.stringify(options.record_delimiter)}`,\n      ],\n      options,\n    );\n  }\n  options.record_delimiter = options.record_delimiter.map(function (rd, i) {\n    if (typeof rd !== \"string\" && !Buffer.isBuffer(rd)) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a string, a buffer or array of string|buffer\",\n          `at index ${i},`,\n          `got ${JSON.stringify(rd)}`,\n        ],\n        options,\n      );\n    } else if (rd.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a non empty string or buffer\",\n          `at index ${i},`,\n          `got ${JSON.stringify(rd)}`,\n        ],\n        options,\n      );\n    }\n    if (typeof rd === \"string\") {\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if (typeof options.relax_column_count === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count === undefined ||\n    options.relax_column_count === null\n  ) {\n    options.relax_column_count = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`,\n    );\n  }\n  if (typeof options.relax_column_count_less === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count_less === undefined ||\n    options.relax_column_count_less === null\n  ) {\n    options.relax_column_count_less = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`,\n    );\n  }\n  if (typeof options.relax_column_count_more === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count_more === undefined ||\n    options.relax_column_count_more === null\n  ) {\n    options.relax_column_count_more = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`,\n    );\n  }\n  // Normalize option `relax_quotes`\n  if (typeof options.relax_quotes === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_quotes === undefined ||\n    options.relax_quotes === null\n  ) {\n    options.relax_quotes = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`,\n    );\n  }\n  // Normalize option `skip_empty_lines`\n  if (typeof options.skip_empty_lines === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_empty_lines === undefined ||\n    options.skip_empty_lines === null\n  ) {\n    options.skip_empty_lines = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`,\n    );\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if (typeof options.skip_records_with_empty_values === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_records_with_empty_values === undefined ||\n    options.skip_records_with_empty_values === null\n  ) {\n    options.skip_records_with_empty_values = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`,\n    );\n  }\n  // Normalize option `skip_records_with_error`\n  if (typeof options.skip_records_with_error === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_records_with_error === undefined ||\n    options.skip_records_with_error === null\n  ) {\n    options.skip_records_with_error = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`,\n    );\n  }\n  // Normalize option `rtrim`\n  if (\n    options.rtrim === undefined ||\n    options.rtrim === null ||\n    options.rtrim === false\n  ) {\n    options.rtrim = false;\n  } else if (options.rtrim !== true) {\n    throw new Error(\n      `Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`,\n    );\n  }\n  // Normalize option `ltrim`\n  if (\n    options.ltrim === undefined ||\n    options.ltrim === null ||\n    options.ltrim === false\n  ) {\n    options.ltrim = false;\n  } else if (options.ltrim !== true) {\n    throw new Error(\n      `Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`,\n    );\n  }\n  // Normalize option `trim`\n  if (\n    options.trim === undefined ||\n    options.trim === null ||\n    options.trim === false\n  ) {\n    options.trim = false;\n  } else if (options.trim !== true) {\n    throw new Error(\n      `Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`,\n    );\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if (options.trim === true && opts.ltrim !== false) {\n    options.ltrim = true;\n  } else if (options.ltrim !== true) {\n    options.ltrim = false;\n  }\n  if (options.trim === true && opts.rtrim !== false) {\n    options.rtrim = true;\n  } else if (options.rtrim !== true) {\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if (options.to === undefined || options.to === null) {\n    options.to = -1;\n  } else {\n    if (typeof options.to === \"string\" && /\\d+/.test(options.to)) {\n      options.to = parseInt(options.to);\n    }\n    if (Number.isInteger(options.to)) {\n      if (options.to <= 0) {\n        throw new Error(\n          `Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`,\n      );\n    }\n  }\n  // Normalize option `to_line`\n  if (options.to_line === undefined || options.to_line === null) {\n    options.to_line = -1;\n  } else {\n    if (typeof options.to_line === \"string\" && /\\d+/.test(options.to_line)) {\n      options.to_line = parseInt(options.to_line);\n    }\n    if (Number.isInteger(options.to_line)) {\n      if (options.to_line <= 0) {\n        throw new Error(\n          `Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`,\n      );\n    }\n  }\n  return options;\n};\n\nexport { normalize_options };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}