{"ast":null,"code":"import { CsvError } from \"./CsvError.js\";\nimport { is_object } from \"../utils/is_object.js\";\nconst normalize_columns_array = function (columns) {\n  const normalizedColumns = [];\n  for (let i = 0, l = columns.length; i < l; i++) {\n    const column = columns[i];\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = {\n        disabled: true\n      };\n    } else if (typeof column === \"string\") {\n      normalizedColumns[i] = {\n        name: column\n      };\n    } else if (is_object(column)) {\n      if (typeof column.name !== \"string\") {\n        throw new CsvError(\"CSV_OPTION_COLUMNS_MISSING_NAME\", [\"Option columns missing name:\", `property \"name\" is required at position ${i}`, \"when column is an object literal\"]);\n      }\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError(\"CSV_INVALID_COLUMN_DEFINITION\", [\"Invalid column definition:\", \"expect a string or a literal object,\", `got ${JSON.stringify(column)} at position ${i}`]);\n    }\n  }\n  return normalizedColumns;\n};\nexport { normalize_columns_array };","map":{"version":3,"names":["CsvError","is_object","normalize_columns_array","columns","normalizedColumns","i","l","length","column","undefined","disabled","name","JSON","stringify"],"sources":["C:/Projects/roman-emperors/node_modules/csv-parse/lib/api/normalize_columns_array.js"],"sourcesContent":["import { CsvError } from \"./CsvError.js\";\nimport { is_object } from \"../utils/is_object.js\";\n\nconst normalize_columns_array = function (columns) {\n  const normalizedColumns = [];\n  for (let i = 0, l = columns.length; i < l; i++) {\n    const column = columns[i];\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = { disabled: true };\n    } else if (typeof column === \"string\") {\n      normalizedColumns[i] = { name: column };\n    } else if (is_object(column)) {\n      if (typeof column.name !== \"string\") {\n        throw new CsvError(\"CSV_OPTION_COLUMNS_MISSING_NAME\", [\n          \"Option columns missing name:\",\n          `property \"name\" is required at position ${i}`,\n          \"when column is an object literal\",\n        ]);\n      }\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError(\"CSV_INVALID_COLUMN_DEFINITION\", [\n        \"Invalid column definition:\",\n        \"expect a string or a literal object,\",\n        `got ${JSON.stringify(column)} at position ${i}`,\n      ]);\n    }\n  }\n  return normalizedColumns;\n};\n\nexport { normalize_columns_array };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,MAAMC,uBAAuB,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACjD,MAAMC,iBAAiB,GAAG,EAAE;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC9C,MAAMG,MAAM,GAAGL,OAAO,CAACE,CAAC,CAAC;IACzB,IAAIG,MAAM,KAAKC,SAAS,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,EAAE;MAC/DJ,iBAAiB,CAACC,CAAC,CAAC,GAAG;QAAEK,QAAQ,EAAE;MAAK,CAAC;IAC3C,CAAC,MAAM,IAAI,OAAOF,MAAM,KAAK,QAAQ,EAAE;MACrCJ,iBAAiB,CAACC,CAAC,CAAC,GAAG;QAAEM,IAAI,EAAEH;MAAO,CAAC;IACzC,CAAC,MAAM,IAAIP,SAAS,CAACO,MAAM,CAAC,EAAE;MAC5B,IAAI,OAAOA,MAAM,CAACG,IAAI,KAAK,QAAQ,EAAE;QACnC,MAAM,IAAIX,QAAQ,CAAC,iCAAiC,EAAE,CACpD,8BAA8B,EAC9B,2CAA2CK,CAAC,EAAE,EAC9C,kCAAkC,CACnC,CAAC;MACJ;MACAD,iBAAiB,CAACC,CAAC,CAAC,GAAGG,MAAM;IAC/B,CAAC,MAAM;MACL,MAAM,IAAIR,QAAQ,CAAC,+BAA+B,EAAE,CAClD,4BAA4B,EAC5B,sCAAsC,EACtC,OAAOY,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,gBAAgBH,CAAC,EAAE,CACjD,CAAC;IACJ;EACF;EACA,OAAOD,iBAAiB;AAC1B,CAAC;AAED,SAASF,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}