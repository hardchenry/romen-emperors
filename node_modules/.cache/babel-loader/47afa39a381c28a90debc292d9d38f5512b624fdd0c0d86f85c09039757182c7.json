{"ast":null,"code":"class ResizeableBuffer {\n  constructor(size = 100) {\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n      if (length >= this.size) {\n        this.resize();\n        if (length >= this.size) {\n          throw Error(\"INVALID_BUFFER_STATE\");\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n      if (length === this.size) {\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n  append(val) {\n    const length = this.length++;\n    if (length === this.size) {\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON() {\n    return this.toString(\"utf8\");\n  }\n  reset() {\n    this.length = 0;\n  }\n}\nexport default ResizeableBuffer;","map":{"version":3,"names":["ResizeableBuffer","constructor","size","length","buf","Buffer","allocUnsafe","prepend","val","isBuffer","resize","Error","copy","clone","append","from","slice","toString","encoding","Uint8Array","prototype","call","toJSON","reset"],"sources":["C:/Projects/roman-emperors/node_modules/csv-parse/lib/utils/ResizeableBuffer.js"],"sourcesContent":["class ResizeableBuffer {\n  constructor(size = 100) {\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n      if (length >= this.size) {\n        this.resize();\n        if (length >= this.size) {\n          throw Error(\"INVALID_BUFFER_STATE\");\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n      if (length === this.size) {\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n  append(val) {\n    const length = this.length++;\n    if (length === this.size) {\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON() {\n    return this.toString(\"utf8\");\n  }\n  reset() {\n    this.length = 0;\n  }\n}\n\nexport default ResizeableBuffer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}